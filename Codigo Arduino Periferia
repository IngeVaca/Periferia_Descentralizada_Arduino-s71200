/*----------------------------------------------------------------------
Data Read Demo

 Created  12 Dec 2016
 Modified 10 Mar 2019 for Settimino 2.0.0
 by Davide Nardella
 
------------------------------------------------------------------------
This demo shows how to read data from the PLC.
A DB with at least 1024 byte into the PLC is needed.
Specify its number into DBNum variable

- Both small and large data transfer are performed (see DO_IT_SMALL)
- During the loop, try to disconnect the ethernet cable.
  The system will report the error and will reconnect automatically
  when you re-plug the cable.
- For safety, this demo *doesn't write* data into the PLC, try
  yourself to change ReadArea with WriteArea.
- This demo uses ConnectTo() with Rack=0 and Slot=2 (S7300)
  - If you want to connect to S71200/S71500 change them to Rack=0, Slot=0.
  - If you want to connect to S7400 see your hardware configuration.
  - If you want to work with a LOGO 0BA7 or S7200 please refer to the
    documentation and change 
    Client.ConnectTo(<IP>, <Rack>, <Slot>);
    with the couple
    Client.SetConnectionParams(<IP>, <LocalTSAP>, <Remote TSAP>);
    Client.Connect();
    
----------------------------------------------------------------------*/
#include "Platform.h"
#include "Settimino.h"
int   Q1[] = {2, 3, 4, 6, 7 , 9, A0, A1};
int   Q2[] = {A2, A3, A4, A5};
int Salida_PWM=5;
// si los datos son menores o iguales a 10 Byte se mantiene esta opcion
#define DO_IT_SMALL

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = { 
  0x90, 0xA2, 0xDA, 0x0F, 0x08, 0xE1 };

IPAddress Local(192,168,0,150); // Direccion del arduino
IPAddress PLC(192,168,0,25);   // Direccion del PLC
//IPAddress Gateway(192, 168, 0, 1); Gateway
IPAddress Subnet(255, 255, 255, 0); //Direccion de subred

int DBNum = 1; // Direccion del DB del PLC al que se apunta
//byte Buffer[1024]; si la cantidad de datos a leer es mas de 10 Bytes, se activa este buffer y se indica cual es la cantidad de Bytes a almacenar

S7Client Client;//se inicia la comunicacion con el PLC
//unsigned long Elapsed; // To calc the execution time
//----------------------------------------------------------------------
// Setup : Init Ethernet and Serial port
//----------------------------------------------------------------------
void setup() {
    // Open serial communications and wait for port to open:
    Serial.begin(115200);
    pinMode(Salida_PWM,OUTPUT);
    pinMode(Q1[0], OUTPUT);
    pinMode(Q1[1], OUTPUT);
    pinMode(Q1[2], OUTPUT);
    pinMode(Q1[3], OUTPUT);
    pinMode(Q1[4], OUTPUT);
    pinMode(Q1[5], OUTPUT);
    pinMode(Q1[6], OUTPUT);
    pinMode(Q1[7], OUTPUT);
    pinMode(Q2[0], OUTPUT);
    pinMode(Q2[1], OUTPUT);
    pinMode(Q2[2], OUTPUT);
    pinMode(Q2[3], OUTPUT);
    digitalWrite (Q1[0], LOW);
    digitalWrite(Q1[1], LOW);
    digitalWrite(Q1[2], LOW);
    digitalWrite(Q1[3], LOW);
    digitalWrite(Q1[4], LOW);
    digitalWrite(Q1[5], LOW);
    digitalWrite(Q1[6], LOW);
    digitalWrite(Q1[7], LOW);
    digitalWrite(Q2[0], LOW);
    digitalWrite(Q2[1], LOW);
    digitalWrite(Q2[2], LOW);
    digitalWrite(Q2[3], LOW);
    // Start the Ethernet Library
    EthernetInit(mac, Local);
    delay(2000); 
    Serial.println("");
    Serial.print("IP ARDUINO");
    Serial.println(Ethernet.localIP());  
}
//----------------------------------------------------------------------
// Conexion al  PLC
//----------------------------------------------------------------------
bool Connect()
{
    int Result=Client.ConnectTo(PLC, 
                                  0,  //Rack  Para 1200 es cero
                                  0); // Slot Para 1200 es cero
    Serial.print("Connecting to ");Serial.println(PLC);  
    if (Result==0) 
    {
      Serial.print("Connected ! PDU Length = ");Serial.println(Client.GetPDULength());
    }
    else
      Serial.println("Connection error");
    return Result==0;
}
//----------------------------------------------------------------------
// Dumps a buffer (a very rough routine)
//----------------------------------------------------------------------
void Dump(void *Buffer, int Length)
{
  int i, cnt=0;
  pbyte buf;
  
  if (Buffer!=NULL)
    buf = pbyte(Buffer);
  else  
    buf = pbyte(&PDU.DATA[0]);

  Serial.print("[ Dumping ");Serial.print(Length);
  Serial.println(" bytes ]===========================");
  for (i=0; i<Length; i++)
  {
    cnt++;
    if (buf[i]<0x10)
      Serial.print("0");
    Serial.print(buf[i], BIN);
    Serial.print(" ");
  
    if (cnt==16)
    {
      cnt=0;
      Serial.println();
    }
  }  

    digitalWrite (Q1[0], bitRead(buf[0],0));
    digitalWrite(Q1[1],  bitRead(buf[0],1));
    digitalWrite(Q1[2],  bitRead(buf[0],2));
    digitalWrite(Q1[3],  bitRead(buf[0],3));
    digitalWrite(Q1[4],  bitRead(buf[0],4));
    digitalWrite(Q1[5],  bitRead(buf[0],5));
    digitalWrite(Q1[6],  bitRead(buf[0],6));
    digitalWrite(Q1[7],  bitRead(buf[0],7));
    digitalWrite(Q2[0],  bitRead(buf[1],0));
    digitalWrite(Q2[1], bitRead(buf[1],1));
    digitalWrite(Q2[2], bitRead(buf[1],2));
    digitalWrite(Q2[3], bitRead(buf[1],3));
    analogWrite(Salida_PWM, buf[2]);
  
  Serial.println("===============================================");
}
//----------------------------------------------------------------------
// Prints the Error number
//----------------------------------------------------------------------
void CheckError(int ErrNo)
{
  Serial.print("Error No. 0x");
  Serial.println(ErrNo, HEX);
  
  // Checks if it's a Severe Error => we need to disconnect
  if (ErrNo & 0x00FF)
  {
    Serial.println("SEVERE ERROR, disconnecting.");
    Client.Disconnect(); 
  }
}
//----------------------------------------------------------------------
// Profiling routines
//----------------------------------------------------------------------
//--------------------------------------------------------------------

//----------------------------------------------------------------------
// Main Loop
//----------------------------------------------------------------------
void loop() 
{

  int Size, Result;
  void *Target;
  
  Size=10;
  Target = NULL; // Uses the internal Buffer (PDU.DATA[])
//#else
  //Size=1024;
  //Target = &Buffer; // Uses a larger buffer
//#endif
  
  // Connection
  while (!Client.Connected)
  {
    if (!Connect())
      delay(500);
  }
  
  Serial.print("Leyendo");Serial.print(Size);Serial.print(" bytes desde DB");Serial.println(DBNum);
  // Get the current tick
  Result=Client.ReadArea(S7AreaDB, // We are requesting DB access
                         DBNum,    // DB Number
                         0,        // Start from byte N.0
                         Size,     // We need "Size" bytes
                         Target);  // Put them into our target (Buffer or PDU)
  if (Result==0)
  {
    Dump(Target, Size);
  }
  else
    CheckError(Result);

  

  delay(500);  
}
